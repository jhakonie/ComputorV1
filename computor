#!/usr/bin/python

import math
import sys
import second_degree

class monomial:
	def __init__(self, exponent, coefficient, sign):
		self.exponent = exponent
		self.coefficient = coefficient * sign
		self.sign = sign

	def add_monomial(self, coefficient, sign):
		self.coefficient += (coefficient * sign)
		if (self.coefficient < 0):
			self.sign = -1
		else:
			self.sign = 1

def is_float(string):
	try:
		float(string)
		return True
	except ValueError:
		return False

def parse_monomial(i, equation, polynomials, equation_len, equal):
	sign = 1
	monomial_len = 1
	if (not is_float(equation[i])):
		print("non numeric character in coefficient, possibly ' * X' missing")
		return -1
	coefficient = float(equation[i])
	# checking if the monomial is negative or on the right side of the equal sign
	if (i > 0):
		if ((equation[i - 1] == "-" and equal == False) or (equation[i - 1] != "-" and equal == True)):
			sign *= -1
			if (coefficient < 0):
				sign *= -1
				coefficient *= sign
	if (coefficient < 0):
		sign *= -1
		coefficient *= sign
		if (equal == True):
			sign *= -1
			coefficient *= sign
	# checking that there is a * operator
	if (i + 1 < equation_len and equation[i + 1] == "*"):
		monomial_len += 1
	else:
		print("error: incorrect syntax '*' missing")
		return -1
	# checking that there is X, else: error message and exit
	if (i + 2 < equation_len and "X" in equation[i + 2]):
		# checking that there is ^, else: error message and exit
		if ("^" in equation[i + 2]):
			temp = []
			# splitting the X and the exponent if there is one
			temp = equation[i + 2].split("^")
			if (len(temp[0]) > 1):
				print("error: characters before of after 'X'")
				return -1
			if (temp[1] == "" or not is_float(temp[1])):
				print("error: exponent missing or contains non-numeric characters after '^'")
				return -1
			exponent_str = temp[1]
			exponent = int(float(exponent_str))
			len_polynomials = len(polynomials)
			exponent_found = False
			# checking if a monomial with the same exponent already exists in polynomials list
			for i in range(len_polynomials):
				if (polynomials[i].exponent == exponent):
					index = i
					exponent_found = True
			# if it exists already, adding the coeficient to the existing one
			if (exponent_found):
				polynomials[index].add_monomial(coefficient, sign)
			# if not, adding a new monomial to the end of polynomials
			else:
				polynomials.append(monomial(exponent, coefficient, sign))
			monomial_len += 1
		else:
			print("error no '^' after 'X'")
			return -1
	else:
		print("error no 'X' after '*'")
		return -1
	return (monomial_len)

def add_missing_polynomial(polynomials, len_polynomials):
	list_exponents = [p.exponent for p in polynomials]
	if 2 not in list_exponents:
		polynomials.append(monomial(2, 0, 1))
	if 1 not in list_exponents:
		polynomials.append(monomial(1, 0, 1))
	if 0 not in list_exponents:
		polynomials.append(monomial(0, 0, 1))
	polynomials.sort(key = lambda x: x.exponent, reverse = False)

def print_solution(polynomials, polynomial_degree, len_polynomials):
	# if some terms are missing, add their value as 0
	if (len_polynomials < 3):
		add_missing_polynomial(polynomials, len_polynomials)
	# Solve ax^2 + bx + c = 0
	a = polynomials[2].coefficient
	b = polynomials[1].coefficient
	c = polynomials[0].coefficient
	solver = second_degree.solver(a, b, c)
	# print results
	if (solver.no_solution):
		print("0-degree equation unequals 0 -> no solution.")
	elif (solver.degree_1):
		print("Solution is:\n" + str(solver.result_1))
	# print complex results
	elif (solver.negative_discriminant):
		print("Discriminant is strictly negative, the two complex solutions are:")
		if (solver.result_1 == 0 or solver.result_1 == -0):
			result1 = str(solver.i) + "i"
		if (solver.result_0 == 0 or solver.result_0 == -0):
			result2 = str(solver.i * -1) + "i"
		else:
			result1 = (str(solver.result_1) + " + " + str(solver.i) + "i")
			result2 = (str(solver.result_0) + " - " + str(solver.i) + "i")
		print(result1)
		print(result2)
	# print a single result
	elif (solver.only_one_result):
		print("Solution is:\n" + str(solver.result_0))
	# print infinite results
	elif (solver.infinite_results):
		print("Each real number is a solution.")
	# print real results
	else:
		print("Discriminant is strictly positive, the two solutions are:")
		print(str(solver.result_1))
		print(str(solver.result_0))

def print_result(polynomials):
	# Sort polynomials by degree, ascending order
	polynomials.sort(key = lambda x: x.exponent, reverse = False)
	len_polynomials = len(polynomials)
	i = 0
	# Create string with the reduced form, keep track of the polynomial degree
	reduced_form = "Reduced form: "
	polynomial_degree = 0
	while (i < len_polynomials):
		if (polynomials[i].sign < 0 and i != 0):
			reduced_form += "- "
		elif (polynomials[i].sign < 0 and i == 0):
			reduced_form += "-"
		elif (i != 0):
			reduced_form += "+ "
		reduced_form += str(polynomials[i].coefficient * polynomials[i].sign) + " * X^" + str(polynomials[i].exponent) + " "
		if (polynomial_degree < polynomials[i].exponent and (polynomials[i].coefficient != 0 or polynomials[i].coefficient != -0)):
			polynomial_degree = polynomials[i].exponent
		i += 1
	reduced_form += "= 0"
	print(reduced_form)
	print("Polynomial degree: " + str(polynomial_degree))
	# only try to solve a second degree equation
	if (polynomial_degree > 2):
		print ("The polynomial degree is strictly greater than 2, I can't solve.")
		return
	else:
		print_solution(polynomials, polynomial_degree, len_polynomials)

def main():
	if (len(sys.argv) == 2):

		# an equation, for example: a * x^2 + b * x + c = 0
		argument = sys.argv[1]
		equation = []
		# splitting the argument into strings/tokens by whitespaces
		equation = argument.split()
		# keeping track of the number of tokens in the equation
		equation_len = len(equation)

		# a list of polynomial terms of an equation, for example: a * x^2 + b * x + c = 0
		polynomials = []

		# keeping track of the equal sign, 0 means it hasn't passed yet
		equal = 0
		i = 0
		while (i < equation_len):
			if (equation[i][0] == "="):
				equal += 1
				i += 1
			if (equal > 1):
				break
			# if a number is found, start parsing the polynomial term
			if (i < equation_len and is_float(equation[i])):
				j = parse_monomial(i, equation, polynomials, equation_len, equal)
				# check for possible error encountered in parsing and quit
				if (j == -1):
					return
				# otherwise parse_monomial returns the length of the term parsed in tokens
				i += j
			# if a number was not found, moving to the next token
			else:
				i += 1
		if (equal == 0):
			print("error no '='")
		elif (equal > 1):
			print("error second '='")
		else:
			print_result(polynomials)
	else:
		print("usage: python3 computor \"equation\", polynomial format '- a * X^b'")
main()
